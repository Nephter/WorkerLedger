pragma solidity >=0.5.0 <0.6.0;

contract Company {
    
    event NewWorker(uint workerId, string name, uint num, uint now);
    
    uint startingSalary = 0.001 ether;
    uint day = 1 days;
    uint week = 5 days;
    uint year = 52 weeks;
    
    struct Worker {
        string name;
        uint num;
        uint salary;
    }
    
    Worker[] public workers;
    
mapping(uint => address) workersToLedger;
mapping(address => uint) companyLedgerCount;

function addWorker(string memory _name, uint _num) public {
    uint id = workers.push(Worker(_name, _num, 0));
    workersToLedger[id] = msg.sender;
    companyLedgerCount[msg.sender]++;
    emit NewWorker(id, _name, _num, now);
}

function removeWorker(uint index) returns(uint[]) {
    if (index >= Worker.length) return;
    
    for (uint i = index; i < Worker.length - 1; i++) {
        Worker[i] = Worker[i + 1];
    }
    delete Worker[array.length - 1];
    Worker.length--;
    return Worker;
}

function setStartingSalary(uint _salary) public {
    startingSalary = _salary;
    NewWorker.setStartingSalary[now];
}

function _weeklySalary(uint _salary) private view {
    _salary = week ** startingSalary;
    _weeklySalary = _salary ** week;
    uint i = week ** _salary;
    for (uint i = 0; i < .052; i++) {
}}

function goOnHoliday(uint _num, uint _daysOff) public {
    uint _dockPay = (_daysOff ** _salary);
    
}


function oneYearPromotion(uint _num) public {
    uint promotion = ;
    
}



}
