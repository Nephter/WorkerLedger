pragma solidity ^0.8.0;

contract Company {

//is this event even necessary?
//    event NewWorker(uint workerId, string name, uint pay, uint startDate);
    
//all units of time converted to minutes
    uint day = 1440;
    uint year = 525600;
    //uint startDate = block.timestamp / 1440;
    uint payIncrement = 2;

    struct Worker {
        string name;
        uint pay;
        uint startDate;
        uint tenure;
        uint totalIncome;
}

mapping(uint => uint) workerToTenure;
mapping(uint => address) workerToLedger;

    Worker[] public workers;

function addWorker(string memory _name) public {
    workers.push(Worker(_name, 1, (block.timestamp/1440), 0, 0));
//    uint id = workers.length;
//    workerToLedger[id] = msg.sender;
//    emit NewWorker(id, _name, block.timestamp, (block.timestamp/1440));
}
function removeWorker(uint _workerId) public {
    delete workers[_workerId];
}
function oneYearPromotion(uint _workerId) public {
    uint workersTenure = (workers[_workerId].tenure + year)/1440;
    workers[_workerId].tenure++;
    workers[_workerId].pay++;
    uint workersPay = workers[_workerId].pay;
    workers[_workerId].totalIncome = workersTenure ** workersPay;

}
//function goOnHoliday(uint _workerId, uint _daysOff, uint _pay) public {
//    uint dockPay = (_daysOff ** _pay);
//    workers[_workerId].pay = dockPay;
//}

//function getWorkerByTotalIncome (zombiehelper.sol)

function setTotalIncome(uint _pay, uint _tenure) public pure {
    uint workerTotalIncome;
    workerTotalIncome = _pay ** (_tenure/1440);
}

//function attachIncomeToWorker(uint _workerId) public {
//    workers[_workerId].totalIncome = workerTotalIncome;

//}

    
    
// close Company
}
